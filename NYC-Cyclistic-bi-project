## Step 1: Extract Data
-- Retrieves raw data from the database.
SQL Code:
SQL Copy Edit (Ensures all trip records are available for processing)
SELECT * FROM nycbike_trip_data_with_assigned_zip_codes;

## Step 2: Data Cleaning
Removes duplicates using DELETE ... WHERE NOT IN ().
Handles missing values using COALESCE().
DELETE FROM raw_tripdata 
WHERE trip_id NOT IN (
    SELECT MIN(trip_id) FROM raw_tripdata GROUP BY start_time, end_time, bikeid, usertype
);

UPDATE nycbike_trip_data_with_assigned_zip_codes
SET trip_duration = COALESCE(trip_duration, 0), 
    usertype = COALESCE(usertype, 'Unknown');
Purpose: Ensures data accuracy and consistency

Step 3: Standardization
Formats timestamps correctly using STR_TO_DATE()
UPDATE nycbike_trip_data_with_assigned_zip_codes
SET start_time = STR_TO_DATE(start_time, '%Y-%m-%d %H:%i:%s'),
    stop_time = STR_TO_DATE(stop_time, '%Y-%m-%d %H:%i:%s');
Purpose: Ensures consistent datetime format for time-based analysis.

Step 4: Transformation (Creating a Clean Data Table)
Creates a cleaned table and calculates trip duration using TIMESTAMPDIFF().
CREATE TABLE IF NOT EXISTS clean_tripdata AS
SELECT 
    trip_id, 
    TIMESTAMPDIFF(MINUTE, start_time, stop_time) AS trip_duration_min, 
    start_station_id, start_station_name, 
    end_station_id, end_station_name, 
    usertype, gender, birth_year 
FROM nycbike_trip_data_with_assigned_zip_codes;
Purpose: Optimizes data structure for better analysis

Step 5: Standardizing Categorical Data
Converts gender from numeric codes (1, 2) to readable values (Male, Female).
UPDATE nycbike_trip_data_with_assigned_zip_codes
SET gender = CASE 
    WHEN gender = 1 THEN 'Male' 
    WHEN gender = 2 THEN 'Female' 
    ELSE 'Unknown' 
END;
Purpose: Makes categorical data more understandable for reporting.

Step 6: Aggregation (Summarized Data for BI Analysis)

Creates a summary table aggregating total trips and average trip duration.
CREATE TABLE IF NOT EXISTS trip_summary AS
SELECT 
    start_station_name, 
    COUNT(trip_id) AS total_trips, 
    AVG(trip_duration_min) AS avg_trip_duration, 
    usertype 
FROM nycbike_trip_data_with_assigned_zip_codes
GROUP BY start_station_name, usertype;
Purpose: Makes data ready for BI tools (Tableau, Power BI).

Step 7: Performance Optimization
Creates indexes for faster queries.
CREATE INDEX idx_tripdata_station ON clean_tripdata (start_station_name, end_station_name);
CREATE INDEX idx_trip_summary ON trip_summary (start_station_name, usertype);
Purpose: Improves query execution time for reports.

Step 8: Analytical Queries for Reporting
Peak Usage Hours:
SELECT HOUR(start_time) AS hour_of_day, COUNT(*) AS trip_count 
FROM nycbike_trip_data_with_assigned_zip_codes
GROUP BY hour_of_day 
ORDER BY trip_count DESC;

Most Popular Start & End Stations:
SELECT start_station_name, COUNT(*) AS trip_count 
FROM nycbike_trip_data_with_assigned_zip_codes 
GROUP BY start_station_name 
ORDER BY trip_count DESC 
LIMIT 10;

Gender Breakdown Analysis:
SELECT gender, COUNT(*) AS total_trips
FROM nycbike_trip_data_with_assigned_zip_codes
GROUP BY gender;
Purpose: Extracts insights for business decision-making.

Step 9: Export transformed data into a Directory
SELECT * 
INTO OUTFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Uploads\\transformed_citibike.csv' 
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"' 
LINES TERMINATED BY '\n'
FROM nycbike_trip_data_with_assigned_zip_codes;

Step 10: Automated Data Refresh
Placeholder for MySQL Events/Triggers to keep data updated automatically.




